@model WebApplication8.Models.NotificationCategory
<link href="~/assets/css/styleMultiSelect.css" rel="stylesheet" />

@{
    ViewBag.Title = "Create";
}

<h2>Create Notification Master</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">

    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


    <div class="form-group ">
        @Html.Label("Select Users", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <span class="autocomplete-select"></span>
            @*<button onclick="resetAutocomplete()">Reset</button>*@
        </div>
    </div>

    @*<div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>*@

    <div class="form-group">
        @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("Name", null, "Please Select", htmlAttributes: new { @class = "form-control", @id = "Name" })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Details, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Details, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Details, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DetailsURL, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DetailsURL, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DetailsURL, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NotificationType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EnumDropDownListFor(model => model.NotificationType, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.NotificationType, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="select-wrapper">
            @Html.Label("Select Users", htmlAttributes: new { @class = "control-label col-md-2" })

            <span class="autocomplete-select"></span>
            <button onclick="resetAutocomplete()">Reset</button>

        </div>*@


    <div id="users"></div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/assets/js/bundle.min.js"></script>


    <script> 
        var array = @Html.Raw(Json.Encode(@ViewBag.Users));
        console.log(array);
        //for(var i =0; i<array.length;i++){
        //   sampleTags[i] = array[i];
        //}  

        var autocomplete = new SelectPure(".autocomplete-select", {
            options: array,
            //options: [
            //    {
            //        label: "Barbina",
            //        value: "ba",
            //    },
            //    {
            //        label: "Bigoli",
            //        value: "bg",
            //    },
            //    {
            //        label: "Bucatini",
            //        value: "bu",
            //    },
            //    {
            //        label: "Busiate",
            //        value: "bus",
            //    },
            //    {
            //        label: "Capellini",
            //        value: "cp",
            //    },
            //    {
            //        label: "Fedelini",
            //        value: "fe",
            //    },
            //    {
            //        label: "Maccheroni",
            //        value: "ma",
            //    },
            //    {
            //        label: "Spaghetti",
            //        value: "sp",
            //    },
            //],
            //value: ["sp"],
            multiple: false,
            autocomplete: true,
            icon: "fa fa-times",
            onChange: value => {
                console.log(value);
                $("#users").empty();
                var st = '<input type="hidden" name="users[]" value="'+value+'">';
                $("#users").append(st);
            },
            //onChange: value => {
            //    console.log(value);
            //    $("#users").empty();
            //    for (var i = 0; i < value.length; i++) {
                    
            //        var st = '<input type="hidden" name="users[]" value="' + value[i] + '">';
            //        $("#users").append(st);
            //    }
            //},
            classNames: {
                select: "select-pure__select",
                dropdownShown: "select-pure__select--opened",
                multiselect: "select-pure__select--multiple",
                label: "select-pure__label",
                placeholder: "select-pure__placeholder",
                dropdown: "select-pure__options",
                option: "select-pure__option",
                autocompleteInput: "select-pure__autocomplete",
                selectedLabel: "select-pure__selected-label",
                selectedOption: "select-pure__option--selected",
                placeholderHidden: "select-pure__placeholder--hidden",
                optionHidden: "select-pure__option--hidden",
            }
        });
        var resetAutocomplete = function () {
            autocomplete.reset();
        };
    </script>
}
